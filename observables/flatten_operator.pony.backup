actor FlattenOperator[C: Any #share] is (Observer[Iterator[C] val] & Observable[C])
//   let _subscribers: Array[Observer[C] tag] = []
//
  be onNext(value: Iterator[C] val) => None
//     for s in _subscribers.values() do
//       for v in value do
//         s.onNext(v)
//       end
//     end
//
//   be onComplete() =>
//     for s in _subscribers.values() do
//       s.onComplete()
//     end
//
//   be onError() =>
//     for s in _subscribers.values() do
//       s.onError()
//     end
//
  be subscribe(observer: Observer[C] tag) => None
//     _subscribers.push(observer)
